_______________________________________________
def main antigo!

val deadline = (new DateTime).withYear(2020)
      .withMonthOfYear(11)
      .withDayOfMonth(6)

    val task: Task = Task(1,"nome",DateTime.now(),deadline,false,"high")
    task.daysLeft()
    val taskDone : Task = task.setDone()
    println(taskDone.name)



_______________________________________________

old storage manager

package PPM
import java.io._

import scala.annotation.tailrec

object StorageManager {

  @tailrec def writeObjectListInFile[A](fileList: List[A], pathToFile: String, append: Boolean): Unit = fileList match {
    case Nil => ;
    case a::t => {
      writeObjectInFile(a, pathToFile, append)
      writeObjectListInFile(t, pathToFile, append = true)
    }
  }

  def writeObjectInFile[A](dataToWrite: A, pathToFile: String, append: Boolean) {
    val savedData = readObjectFromFile(pathToFile)
    var out = None: Option[ObjectOutputStream]
    try {
      out = Some(new ObjectOutputStream(new FileOutputStream(pathToFile)))
      if (append) out.get.writeObject(savedData.asInstanceOf[List[A]] ++ List(dataToWrite))
      else  out.get.writeObject(List(dataToWrite))
    } catch {
      case e: IOException => e.printStackTrace()
    } finally {
      if (out.isDefined) out.get.close()
    }
  }


  def readObjectFromFile[A](pathToFile: String) = {
    var in = None: Option[ObjectInputStream]
    var file = new File(pathToFile)
    file.createNewFile()
    try {
      in = Some(new ObjectInputStream(new FileInputStream(file)))
      in.get.readObject()
    } catch {
      case e1: EOFException => List[A]()
      case e2: IOException => e2.printStackTrace()
    } finally {
      if (in.isDefined) in.get.close()
    }
  }
}

_______________________________________________

old sharedfile

package PPM

import java.io.Serializable
import java.util.Date

case class Comment(user: User, date: Date, content: String)

case class SharedFile(fileName: String, id: Int, path: String, comments: List[Comment]) extends Serializable {
  def getName() = SharedFile.getName(this)
  def getId() = SharedFile.getId(this)
  def getPath() = SharedFile.getPath(this)
  def getComments() = SharedFile.getComments(this)
  def addComment(comment: Comment) = SharedFile.addComment(this, comment)
  override def toString() = SharedFile.toString(this)

}


object SharedFile {

  type fileName = String
  type id = Int
  type path = String
  type comments = List[Comment]

  def getName(sh: SharedFile) =
  {
    sh.fileName
  }

  def getId(sh: SharedFile) =
  {
    sh.id
  }

  def getPath(sh: SharedFile) =
  {
    sh.path
  }

  def getComments(sh: SharedFile) = {
    sh.comments
  }

  def addComment(sh: SharedFile, comment: Comment): SharedFile =
  {
    new SharedFile(sh.fileName, sh.id, sh.path, sh.comments ++ List(comment))
  }

  def toString(sh: SharedFile): String =
  {
    sh.id + ": " + sh.fileName
  }

}

_______________________________________________